# -*- coding: utf-8 -*-
"""AML_Project_Plots.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rbxRB6rZegdYtfpxeCq_kgwTAC_jn_Y3

# Plots
"""

import json
import os
import numpy as np
import matplotlib.pyplot as plt

# ----------------------------------------
# Settings
# ----------------------------------------
hidden_sizes = [64, 128, 256, 512]
cp_ranks = [50, 101, 350, 1500]

# ----------------------------------------
# Load all JSON result files
# ----------------------------------------
results = {}
for h in hidden_sizes:
    file = f"results_hidden_{h}.json"
    if os.path.exists(file):
        with open(file, "r") as f:
            data = json.load(f)
            results.update(data)
    else:
        print(f"Warning: {file} not found.")

# ----------------------------------------
# Organize data for plotting
# ----------------------------------------
rnn_bpcs = []
mirnn_bpcs = []
twornn_bpcs = []
cprnn_bpcs = {R: [] for R in cp_ranks}
param_counts = []

def approx_param_count(H):
    return int(EMBED_SIZE * H + H * H + H + H * VOCAB_SIZE)

VOCAB_SIZE = 50   # approximate (PTB has ~50 chars)
EMBED_SIZE = 128

for H in hidden_sizes:
    rnn_bpcs.append(results[f"RNN_{H}"])
    mirnn_bpcs.append(results[f"MIRNN_{H}"])
    twornn_bpcs.append(results[f"2RNN_{H}"])
    for R in cp_ranks:
        cprnn_bpcs[R].append(results[f"CPRNN_{H}_R{R}"])
    param_counts.append(approx_param_count(H))

# ----------------------------------------
# Plotting
# ----------------------------------------
fig, axs = plt.subplots(1, 2, figsize=(12, 5))

# --- Left: BPC vs Hidden Size ---
ax = axs[0]
ax.plot(hidden_sizes, rnn_bpcs, marker='s', color='orange', label='RNN')
ax.plot(hidden_sizes, mirnn_bpcs, marker='^', color='red', label='MIRNN')
ax.plot(hidden_sizes, twornn_bpcs, marker='D', color='blue', label='2RNN')
for R, style in zip(cp_ranks, ['dotted', 'dashdot', 'dashed', 'solid']):
    ax.plot(hidden_sizes, cprnn_bpcs[R], linestyle=style, marker='o', color='green', label=f'CPRNN R={R}')
ax.set_xscale('log')
ax.set_xlabel('Hidden Size')
ax.set_ylabel('BPC')
ax.set_title('BPC vs Hidden Size')
ax.grid(True, which='both', linestyle='--', linewidth=0.5)
ax.legend(fontsize=8)

# --- Right: BPC vs Parameter Count ---
ax = axs[1]
ax.plot(param_counts, rnn_bpcs, marker='s', color='orange', label='RNN')
ax.plot(param_counts, mirnn_bpcs, marker='^', color='red', label='MIRNN')
ax.plot(param_counts, twornn_bpcs, marker='D', color='blue', label='2RNN')
# Average CPRNN ranks for combined curve
cprnn_avg = np.mean(np.array(list(cprnn_bpcs.values())), axis=0)
ax.plot(param_counts, cprnn_avg, marker='o', color='green', label='CPRNN')
ax.set_xscale('log')
ax.set_xlabel('Number of Parameters (approx)')
ax.set_ylabel('BPC')
ax.set_title('BPC vs Model Size')
ax.grid(True, which='both', linestyle='--', linewidth=0.5)
ax.legend(fontsize=8)

# Save + show
plt.tight_layout()
plt.savefig("final_bpc_plots.png", dpi=300)
plt.show()

"""# Tucker RNN"""

for h in hidden_sizes:
    file = f"results_tucker_hidden{h}.json"
    if os.path.exists(file):
        with open(file, "r") as f:
            data = json.load(f)
            results.update(data)
    else:
        print(f"Warning: {file} not found.")

rnn_bpcs = []
mirnn_bpcs = []
twornn_bpcs = []
cprnn_bpcs = {R: [] for R in cp_ranks}
tuckerrnn_bpcs = {R: [] for R in cp_ranks}
param_counts = []

VOCAB_SIZE = 50
EMBED_SIZE = 128

def approx_param_count(H):
    return int(EMBED_SIZE * H + H * H + H + H * VOCAB_SIZE)

for H in hidden_sizes:
    rnn_bpcs.append(results[f"RNN_{H}"])
    mirnn_bpcs.append(results[f"MIRNN_{H}"])
    twornn_bpcs.append(results[f"2RNN_{H}"])
    for R in cp_ranks:
        cprnn_bpcs[R].append(results[f"CPRNN_{H}_R{R}"])
        tuckerrnn_bpcs[R].append(results[f"TuckerRNN_{H}_R{R}"])
    param_counts.append(approx_param_count(H))

fig, axs = plt.subplots(1, 2, figsize=(12, 5))

# --- Left: BPC vs Hidden Size ---
ax = axs[0]
ax.plot(hidden_sizes, rnn_bpcs, marker='s', color='orange', label='RNN')
ax.plot(hidden_sizes, mirnn_bpcs, marker='^', color='red', label='MIRNN')
ax.plot(hidden_sizes, twornn_bpcs, marker='D', color='blue', label='2RNN')
for R, style in zip(cp_ranks, ['dotted', 'dashdot', 'dashed', 'solid']):
    ax.plot(hidden_sizes, cprnn_bpcs[R], linestyle=style, marker='o', color='green', label=f'CPRNN R={R}')
    ax.plot(hidden_sizes, tuckerrnn_bpcs[R], linestyle=style, marker='x', color='purple', label=f'TuckerRNN R={R}')
ax.set_xscale('log')
ax.set_xlabel('Hidden Size')
ax.set_ylabel('BPC')
ax.set_title('BPC vs Hidden Size')
ax.grid(True, which='both', linestyle='--', linewidth=0.5)
ax.legend(fontsize=8, ncol=2)

# --- Right: BPC vs Parameter Count ---
ax = axs[1]
ax.plot(param_counts, rnn_bpcs, marker='s', color='orange', label='RNN')
ax.plot(param_counts, mirnn_bpcs, marker='^', color='red', label='MIRNN')
ax.plot(param_counts, twornn_bpcs, marker='D', color='blue', label='2RNN')
# Average CPRNN and TuckerRNN across ranks
cprnn_avg = np.mean(np.array(list(cprnn_bpcs.values())), axis=0)
tuckerrnn_avg = np.mean(np.array(list(tuckerrnn_bpcs.values())), axis=0)
ax.plot(param_counts, cprnn_avg, marker='o', color='green', label='CPRNN (avg)')
ax.plot(param_counts, tuckerrnn_avg, marker='x', color='purple', label='TuckerRNN (avg)')
ax.set_xscale('log')
ax.set_xlabel('Number of Parameters (approx)')
ax.set_ylabel('BPC')
ax.set_title('BPC vs Model Size')
ax.grid(True, which='both', linestyle='--', linewidth=0.5)
ax.legend(fontsize=8)

# Save + show
plt.tight_layout()
plt.savefig("final_bpc_plots_with_tuckerrnn.png", dpi=300)
plt.show()

